%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Malyadri Venkata Sampath Naveen Padmanabhuni
%%Title: Window .printEngine1.page.layout
%%CreationDate: Wed Dec  1 18:36:14 2021
%%BoundingBox: 0 0 613 793
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%DocumentNeededResources: font Gothic
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog

%%BeginSetup
/CL 2 def
%%IncludeResource: font Gothic
%%EndSetup

%%Page: 1 1
save
0.0 0.0 translate
90 rotate
0.6 0.6 scale
0 -1020 translate
0 1020 moveto 1320 1020 lineto 1320 0 lineto 0 0 lineto closepath clip newpath
gsave
/Gothic findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1260 960 [
[(Page 1 of 1)]
] 16 -1 0 0 false DrawText
grestore
gsave
/Gothic findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1260 59.9999999999999 [
[(Printed by SimVision from Cadence Design Systems, Inc.)]
] 16 -1 1 0 false DrawText
grestore
gsave
/Gothic findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
60 59.9999999999999 [
[(Printed on Wed Dec 01 18:36:09 EST 2021)]
] 16 -0 1 0 false DrawText
grestore
gsave
/Gothic findfont 18 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
60 960 [
[(padmanabhuni - U88648766 || USF EE)]
] 28 -0 0 0 false DrawText
grestore
gsave
/Gothic findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
60 932 [
[(D-register designed as part of the Paplinski's "WORD SERIAL MULTIPLIER")]
] 16 -0 0 0 false DrawText
grestore
gsave
/Gothic findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
60 916 [
[(D register is the Multiplicant register here, which operates when the clock is high -> clk - '1', this is a memory register which is used by the ALU)]
] 16 -0 0 0 false DrawText
grestore
gsave
/Gothic findfont 10 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
60 900 [
[(We have clk, op \050operation\051, DD as inputs and D as the output, D_s, Dop are the internal signals, D_s will feed the output to the D register when the Dop is '1' finally we give 5 different test vectors to test the functionality of the Register)]
] 16 -0 0 0 false DrawText
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
204 828 [
[(Cursor-Baseline = )]
] 11 -1 1 0 false DrawText
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
204 828 [
[(8ns)]
] 11 -0 1 0 false DrawText
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
204 845 [
[(Baseline = )]
] 11 -1 1 0 false DrawText
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
204 845 [
[(0)]
] 11 -0 1 0 false DrawText
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
204 862 [
[(Cursor = )]
] 11 -1 1 0 false DrawText
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
204 862 [
[(8ns)]
] 11 -0 1 0 false DrawText
grestore
gsave

% including file "lib/blt2.4/bltCanvEps.pro"

%
% PostScript encapulator prolog file of the BLT "eps" canvas item.
%
% Copyright 1991-1997 Bell Labs Innovations for Lucent Technologies.
%
% Permission to use, copy, modify, and distribute this software and its
% documentation for any purpose and without fee is hereby granted, provided
% that the above copyright notice appear in all copies and that both that the
% copyright notice and warranty disclaimer appear in supporting documentation,
% and that the names of Lucent Technologies any of their entities not be used
% in advertising or publicity pertaining to distribution of the software
% without specific, written prior permission.
%
% Lucent Technologies disclaims all warranties with regard to this software,
% including all implied warranties of merchantability and fitness.  In no event
% shall Lucent Technologies be liable for any special, indirect or
% consequential damages or any damages whatsoever resulting from loss of use,
% data or profits, whether in an action of contract, negligence or other
% tortuous action, arising out of or in connection with the use or performance
% of this software.
%

%
% The definitions of the next two macros are from Appendix H of 
% Adobe's "PostScript Language Reference Manual" pp. 709-736.
% 

% Prepare for EPS file

/BeginEPSF {				
  /beforeInclusionState save def
  /dictCount countdictstack def		% Save the # objects in the dictionary
  /opCount count 1 sub def		% Count object on operator stack
  userdict begin			% Make "userdict" the current 
					% dictionary
    /showpage {} def			% Redefine showpage to be null
    0 setgray 
    0 setlinecap
    1 setlinewidth
    0 setlinejoin
    10 setmiterlimit
    [] 0 setdash
    newpath
    /languagellevel where {
      pop languagelevel 
      1 ne {
	false setstrokeadjust false setoverprint
      } if
    } if
    % note: no "end"
} bind def

/EndEPSF { %def
  count opCount sub {
    pop
  } repeat
  countdictstack dictCount sub { 
  end					% Clean up dictionary stack
  } repeat
  beforeInclusionState restore
} bind def


%
% Set up a clip region based upon a bounding box (x1, y1, x2, y2).
%
/SetClipRegion {
  % Stack: x1 y1 x2 y2
  newpath
  4 2 roll moveto
  1 index 0 rlineto
  0 exch rlineto
  neg 0 rlineto
  closepath
  clip
  newpath
} def

BeginEPSF
60 761 translate
1.66667 1.6 scale
0 -25 translate
0 25 105 65 SetClipRegion
%% including "/tmp/tmp1sl76393.ps"

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Maxim Widget
%%Title: Window .printEngine1.raw.slist
%%CreationDate: Wed Dec  1 18:36:13 2021
%%BoundingBox: 0 25 105 65
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Gothic
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Gothic
%%EndSetup

%%Page: 1 1
save
0.0 64.0 translate
0.5998 0.5998 scale
0 -64 translate
0 64 moveto 175 64 lineto 175 0 lineto 0 0 lineto closepath clip newpath
gsave
gsave
0 64 moveto
175 64 lineto
175 0 lineto
0 0 lineto
closepath
clip
newpath
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
0 64 moveto
174 64 lineto
174 0 lineto
0 0 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 63 moveto
173 63 lineto
173 47 lineto
1 47 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 47 moveto
173 47 lineto
173 31 lineto
1 31 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 31 moveto
173 31 lineto
173 15 lineto
1 15 lineto
closepath
fill
grestore
gsave
0.949 0.949 0.949 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 15 moveto
173 15 lineto
173 -1 lineto
1 -1 lineto
closepath
fill
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 54 moveto
10 6 lineto
stroke
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 54 moveto
26 54 lineto
stroke
grestore
gsave
24 48 translate
/TkPhoto { 
  gsave 
  32 dict begin 
  /tinteger exch def 
  /transparent 1 string def 
  transparent 0 tinteger put 
  /olddict exch def 
  olddict /DataSource get dup type /filetype ne { 
    olddict /DataSource 3 -1 roll 
    0 () /SubFileDecode filter put 
  } { 
    pop 
  } ifelse 
  /newdict olddict maxlength dict def 
  olddict newdict copy pop 
  /w newdict /Width get def 
  /crpp newdict /Decode get length 2 idiv def 
  /str w string def 
  /pix w crpp mul string def 
  /substrlen 2 w log 2 log div floor exp cvi def 
  /substrs [ 
  { 
     substrlen string 
     0 1 substrlen 1 sub { 
       1 index exch tinteger put 
     } for 
     /substrlen substrlen 2 idiv def 
     substrlen 0 eq {exit} if 
  } loop 
  ] def 
  /h newdict /Height get def 
  1 w div 1 h div matrix scale 
  olddict /ImageMatrix get exch matrix concatmatrix 
  matrix invertmatrix concat 
  newdict /Height 1 put 
  newdict /DataSource pix put 
  /mat [w 0 0 h 0 0] def 
  newdict /ImageMatrix mat put 
  0 1 h 1 sub { 
    mat 5 3 -1 roll neg put 
    olddict /DataSource get str readstring pop pop 
    /tail str def 
    /x 0 def 
    olddict /DataSource get pix readstring pop pop 
    { 
      tail transparent search dup /done exch not def 
      {exch pop exch pop} if 
      /w1 exch length def 
      w1 0 ne { 
        newdict /DataSource  pix x crpp mul w1 crpp mul getinterval put 
        newdict /Width w1 put 
        mat 4 x neg put 
        /x x w1 add def 
        newdict image 
        /tail tail w1 tail length w1 sub getinterval def 
      } if 
      done {exit} if 
      tail substrs { 
        anchorsearch {pop} if 
      } forall 
      /tail exch def 
      tail length 0 eq {exit} if 
      /x w tail length sub def 
    } loop 
  } for 
  end 
  grestore 
} bind def 


/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 20
  /Height 12
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 12]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
01010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000000000
4B618B4E65914E65914E65914E65914E65914E65914E65914E65914E6591
4E6591495F8800000000000000000000000001010101FFFFFFFFFFFFFFFF
FFFFFFFF010101010000000000000000000000004E6591FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
00000000000001010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000
0000000000004E6591F0F2F8788DC1788DC1788DC1788DC1788DC1788DC1
788DC1788DC1F0F2F84E659100000000000000000000000001010101FFFF
FFFFFFFFFFFFFFFFFFFF010101010000000000000000000000004E6591E1E5F1
788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC1E1E5F14E6591
0000000000000000000000000101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101000000000000FFFF00FFFF004E6591D2D8EA788DC1788DC1FFFFFFFFFFFF
FFFFFFFFFFFF788DC1788DC1D2D8EA4E6591FFFF00FFFF00000000000000
0101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000FFFF00FFFF00
4E6591C3CBE3788DC1788DC1FFFFFF788DC1788DC1FFFFFF788DC1788DC1
C3CBE34E6591FFFF00FFFF000000000000000101FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF0101000000000000FFFF00FFFF004E6591B4BEDC788DC1788DC1
FFFFFF788DC1788DC1FFFFFF788DC1788DC1B4BEDC4E6591FFFF00FFFF00
0000000000000101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
FFFF00FFFF004E6591A5B2D5FFFFFFFFFFFFFFFFFF788DC1788DC1FFFFFF
FFFFFFFFFFFFA5B2D54E6591FFFF00FFFF0000000000000001010101FFFF
FFFFFFFFFFFFFFFFFFFF010101010000000000000000000000004E65919AA8D0
788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC19AA8D04E6591
00000000000000000000000001010101FFFFFFFFFFFFFFFFFFFFFFFF0101
01010000000000000000000000004E65918F9FCB788DC1788DC1788DC1788DC1
788DC1788DC1788DC1788DC18F9FCB4E6591000000000000000000000000
01010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000000000
4E65918396C6788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC1
8396C64E659100000000000000000000000001010101FFFFFFFFFFFFFFFF
FFFFFFFF01010101000000000000000000000000475B834E65914E65914E6591
4E65914E65914E65914E65914E65914E65914E659144587F000000000000
000000000000>
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
48 50 [
[(clk_tb)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 38 moveto
26 38 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 42 moveto
13 42 lineto
13 34 lineto
6 34 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 42 moveto
14 42 lineto
14 34 lineto
6 34 lineto
closepath
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
8 38 moveto
12 38 lineto
stroke
10 40 moveto
10 36 lineto
stroke
grestore
gsave
22 31 translate
/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 22
  /Height 14
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 14]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
010101FFFFFFFFFFFFFFFFFF01010101010101010101000000000000000000
4B618C4E65914E65914E65914E65914E65914E65914E65914B618B000000
000000000000000000000000000000000000000000000000000000010101
FFFFFFFFFFFFFFFFFF010101010101010101010000000000000000004E6591
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
000000000000000000000000000000000000000000000000010101FFFFFF
FFFFFFFFFFFFFFFFFF010101010101010000000000000000004E6591E9ECF5
788DC15E74A34E65914E65914E65914E65914E65914E65914E65914B618B
00000000000000000000000000000000000000000001FFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101010101000000FFFF00FFFF00536994D5DBEC7C90C3
4E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000
00000000000000000000000000000000000001FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101000000FFFF00FFFF0060759CC6CDE48699C74E6591
E9ECF5788DC15E74A34E65914E65914E65914E65914E65914E65914E6591
4B618C00000000000000000000000001FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF01010101000000FFFF00FFFF0060759CFFFF00FFFF004E6591D4DAEB
788DC14E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591
000000000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101010100000000000000000060759CFFFF00FFFF0060759CC6CDE48699C7
4E6591E9ECF5788DC1788DC1788DC1788DC1788DC1E9ECF54E6591000000
000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01
0100000000000000000060759CFFFF00FFFF0060759CFFFF00FFFF004E6591
D4DAEB788DC1FFFFFFFFFFFFFFFFFF788DC1D4DAEB4E6591FFFF00FFFF00
000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000
00000000000055678A60759C60759C60759CFFFF00FFFF004E6591BFC7E1
788DC1FFFFFF788DC1FFFFFF788DC1BFC7E14E6591FFFF00FFFF00000000
000000010101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
00000000000000000000000060759CFFFF00FFFF004E6591A9B5D7FFFFFF
FFFFFF788DC1FFFFFFFFFFFFA9B5D74E6591FFFF00FFFF00000000000000
010101010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000
00000000000000000054668A60759C60759C4E659198A7CF788DC1788DC1
788DC1788DC1788DC198A7CF4E6591000000000000000000000000010101
010101010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000
0000000000000000000000000000004E6591889AC8788DC1788DC1788DC1
788DC1788DC1889AC84E6591000000000000000000000000010101010101
010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000000000
00000000000000000000000044587E4E65914E65914E65914E65914E6591
4E65914E659144587E000000000000000000000000010101010101010101
01010101010101010101010101000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000>
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
48 34 [
[(DD_tb)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 22 moveto
26 22 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 26 moveto
13 26 lineto
13 18 lineto
6 18 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 26 moveto
14 26 lineto
14 18 lineto
6 18 lineto
closepath
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
8 22 moveto
12 22 lineto
stroke
10 24 moveto
10 20 lineto
stroke
grestore
gsave
22 15 translate
/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 22
  /Height 14
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 14]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
010101FFFFFFFFFFFFFFFFFF01010101010101010101000000000000000000
4B618C4E65914E65914E65914E65914E65914E65914E65914B618B000000
000000000000000000000000000000000000000000000000000000010101
FFFFFFFFFFFFFFFFFF010101010101010101010000000000000000004E6591
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
000000000000000000000000000000000000000000000000010101FFFFFF
FFFFFFFFFFFFFFFFFF010101010101010000000000000000004E6591E9ECF5
788DC15E74A34E65914E65914E65914E65914E65914E65914E65914B618B
00000000000000000000000000000000000000000001FFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101010101000000FFFF00FFFF00536994D5DBEC7C90C3
4E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000
00000000000000000000000000000000000001FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101000000FFFF00FFFF0060759CC6CDE48699C74E6591
E9ECF5788DC15E74A34E65914E65914E65914E65914E65914E65914E6591
4B618C00000000000000000000000001FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF01010101000000FFFF00FFFF0060759CFFFF00FFFF004E6591D4DAEB
788DC14E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591
000000000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101010100000000000000000060759CFFFF00FFFF0060759CC6CDE48699C7
4E6591E9ECF5788DC1788DC1788DC1788DC1788DC1E9ECF54E6591000000
000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01
0100000000000000000060759CFFFF00FFFF0060759CFFFF00FFFF004E6591
D4DAEB788DC1FFFFFFFFFFFFFFFFFF788DC1D4DAEB4E6591FFFF00FFFF00
000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000
00000000000055678A60759C60759C60759CFFFF00FFFF004E6591BFC7E1
788DC1FFFFFF788DC1FFFFFF788DC1BFC7E14E6591FFFF00FFFF00000000
000000010101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
00000000000000000000000060759CFFFF00FFFF004E6591A9B5D7FFFFFF
FFFFFF788DC1FFFFFFFFFFFFA9B5D74E6591FFFF00FFFF00000000000000
010101010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000
00000000000000000054668A60759C60759C4E659198A7CF788DC1788DC1
788DC1788DC1788DC198A7CF4E6591000000000000000000000000010101
010101010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000
0000000000000000000000000000004E6591889AC8788DC1788DC1788DC1
788DC1788DC1889AC84E6591000000000000000000000000010101010101
010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000000000
00000000000000000000000044587E4E65914E65914E65914E65914E6591
4E65914E659144587E000000000000000000000000010101010101010101
01010101010101010101010101000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000>
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
48 18 [
[(op_tb)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 6 moveto
26 6 lineto
stroke
grestore
gsave
0.949 0.949 0.949 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 10 moveto
13 10 lineto
13 2 lineto
6 2 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 10 moveto
14 10 lineto
14 2 lineto
6 2 lineto
closepath
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
8 6 moveto
12 6 lineto
stroke
10 8 moveto
10 4 lineto
stroke
grestore
gsave
22 -1 translate
/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 22
  /Height 14
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 14]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
010101FFFFFFFFFFFFFFFFFF01010101010101010101000000000000000000
4B618C4E65914E65914E65914E65914E65914E65914E65914B618B000000
000000000000000000000000000000000000000000000000000000010101
FFFFFFFFFFFFFFFFFF010101010101010101010000000000000000004E6591
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
000000000000000000000000000000000000000000000000010101FFFFFF
FFFFFFFFFFFFFFFFFF010101010101010000000000000000004E6591E9ECF5
788DC15E74A34E65914E65914E65914E65914E65914E65914E65914B618B
00000000000000000000000000000000000000000001FFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101010101000000FFFF00FFFF00536994D5DBEC7C90C3
4E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000
00000000000000000000000000000000000001FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101000000FFFF00FFFF0060759CC6CDE48699C74E6591
E9ECF5788DC15E74A34E65914E65914E65914E65914E65914E65914E6591
4B618C00000000000000000000000001FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF01010101000000FFFF00FFFF0060759CFFFF00FFFF004E6591D4DAEB
788DC14E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591
000000000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101010100000000000000000060759CFFFF00FFFF0060759CC6CDE48699C7
4E6591E9ECF5788DC1788DC1788DC1788DC1788DC1E9ECF54E6591000000
000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01
0100000000000000000060759CFFFF00FFFF0060759CFFFF00FFFF004E6591
D4DAEB788DC1FFFFFFFFFFFFFFFFFF788DC1D4DAEB4E6591FFFF00FFFF00
000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000
00000000000055678A60759C60759C60759CFFFF00FFFF004E6591BFC7E1
788DC1FFFFFF788DC1FFFFFF788DC1BFC7E14E6591FFFF00FFFF00000000
000000010101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
00000000000000000000000060759CFFFF00FFFF004E6591A9B5D7FFFFFF
FFFFFF788DC1FFFFFFFFFFFFA9B5D74E6591FFFF00FFFF00000000000000
010101010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000
00000000000000000054668A60759C60759C4E659198A7CF788DC1788DC1
788DC1788DC1788DC198A7CF4E6591000000000000000000000000010101
010101010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000
0000000000000000000000000000004E6591889AC8788DC1788DC1788DC1
788DC1788DC1889AC84E6591000000000000000000000000010101010101
010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000000000
00000000000000000000000044587E4E65914E65914E65914E65914E6591
4E65914E659144587E000000000000000000000000010101010101010101
01010101010101010101010101000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000>
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
48 2 [
[(D_tb)]
] 9 0 0.85 0 false DrawText
grestore
grestore
grestore
restore showpage

%%Trailer
end
%%EOF

EndEPSF
grestore
gsave

% including file "lib/blt2.4/bltCanvEps.pro"

%
% PostScript encapulator prolog file of the BLT "eps" canvas item.
%
% Copyright 1991-1997 Bell Labs Innovations for Lucent Technologies.
%
% Permission to use, copy, modify, and distribute this software and its
% documentation for any purpose and without fee is hereby granted, provided
% that the above copyright notice appear in all copies and that both that the
% copyright notice and warranty disclaimer appear in supporting documentation,
% and that the names of Lucent Technologies any of their entities not be used
% in advertising or publicity pertaining to distribution of the software
% without specific, written prior permission.
%
% Lucent Technologies disclaims all warranties with regard to this software,
% including all implied warranties of merchantability and fitness.  In no event
% shall Lucent Technologies be liable for any special, indirect or
% consequential damages or any damages whatsoever resulting from loss of use,
% data or profits, whether in an action of contract, negligence or other
% tortuous action, arising out of or in connection with the use or performance
% of this software.
%

%
% The definitions of the next two macros are from Appendix H of 
% Adobe's "PostScript Language Reference Manual" pp. 709-736.
% 

% Prepare for EPS file

/BeginEPSF {				
  /beforeInclusionState save def
  /dictCount countdictstack def		% Save the # objects in the dictionary
  /opCount count 1 sub def		% Count object on operator stack
  userdict begin			% Make "userdict" the current 
					% dictionary
    /showpage {} def			% Redefine showpage to be null
    0 setgray 
    0 setlinecap
    1 setlinewidth
    0 setlinejoin
    10 setmiterlimit
    [] 0 setdash
    newpath
    /languagellevel where {
      pop languagelevel 
      1 ne {
	false setstrokeadjust false setoverprint
      } if
    } if
    % note: no "end"
} bind def

/EndEPSF { %def
  count opCount sub {
    pop
  } repeat
  countdictstack dictCount sub { 
  end					% Clean up dictionary stack
  } repeat
  beforeInclusionState restore
} bind def


%
% Set up a clip region based upon a bounding box (x1, y1, x2, y2).
%
/SetClipRegion {
  % Stack: x1 y1 x2 y2
  newpath
  4 2 roll moveto
  1 index 0 rlineto
  0 exch rlineto
  neg 0 rlineto
  closepath
  clip
  newpath
} def

BeginEPSF
234 761 translate
1.6383 1.6 scale
0 -25 translate
0 25 47 65 SetClipRegion
%% including "/tmp/tmp1sd76393.ps"

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Maxim Widget
%%Title: Window .printEngine1.raw.sdata
%%CreationDate: Wed Dec  1 18:36:13 2021
%%BoundingBox: 0 25 47 65
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Gothic
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Gothic
%%EndSetup

%%Page: 1 1
save
0.0 64.0 translate
0.5998 0.5998 scale
0 -64 translate
0 64 moveto 77 64 lineto 77 0 lineto 0 0 lineto closepath clip newpath
gsave
gsave
0 64 moveto
77 64 lineto
77 0 lineto
0 0 lineto
closepath
clip
newpath
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
0 64 moveto
76 64 lineto
76 0 lineto
0 0 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 63 moveto
75 63 lineto
75 47 lineto
1 47 lineto
closepath
fill
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
3 51 [
[(0)]
] 9 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 47 moveto
75 47 lineto
75 31 lineto
1 31 lineto
closepath
fill
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
3 35 [
[('h00000000)]
] 9 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 31 moveto
75 31 lineto
75 15 lineto
1 15 lineto
closepath
fill
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
3 19 [
[('h00)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.949 0.949 0.949 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 15 moveto
75 15 lineto
75 -1 lineto
1 -1 lineto
closepath
fill
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
3 3 [
[('h00000000)]
] 9 0 0.85 0 false DrawText
grestore
grestore
grestore
restore showpage

%%Trailer
end
%%EOF

EndEPSF
grestore
gsave

% including file "lib/blt2.4/bltCanvEps.pro"

%
% PostScript encapulator prolog file of the BLT "eps" canvas item.
%
% Copyright 1991-1997 Bell Labs Innovations for Lucent Technologies.
%
% Permission to use, copy, modify, and distribute this software and its
% documentation for any purpose and without fee is hereby granted, provided
% that the above copyright notice appear in all copies and that both that the
% copyright notice and warranty disclaimer appear in supporting documentation,
% and that the names of Lucent Technologies any of their entities not be used
% in advertising or publicity pertaining to distribution of the software
% without specific, written prior permission.
%
% Lucent Technologies disclaims all warranties with regard to this software,
% including all implied warranties of merchantability and fitness.  In no event
% shall Lucent Technologies be liable for any special, indirect or
% consequential damages or any damages whatsoever resulting from loss of use,
% data or profits, whether in an action of contract, negligence or other
% tortuous action, arising out of or in connection with the use or performance
% of this software.
%

%
% The definitions of the next two macros are from Appendix H of 
% Adobe's "PostScript Language Reference Manual" pp. 709-736.
% 

% Prepare for EPS file

/BeginEPSF {				
  /beforeInclusionState save def
  /dictCount countdictstack def		% Save the # objects in the dictionary
  /opCount count 1 sub def		% Count object on operator stack
  userdict begin			% Make "userdict" the current 
					% dictionary
    /showpage {} def			% Redefine showpage to be null
    0 setgray 
    0 setlinecap
    1 setlinewidth
    0 setlinejoin
    10 setmiterlimit
    [] 0 setdash
    newpath
    /languagellevel where {
      pop languagelevel 
      1 ne {
	false setstrokeadjust false setoverprint
      } if
    } if
    % note: no "end"
} bind def

/EndEPSF { %def
  count opCount sub {
    pop
  } repeat
  countdictstack dictCount sub { 
  end					% Clean up dictionary stack
  } repeat
  beforeInclusionState restore
} bind def


%
% Set up a clip region based upon a bounding box (x1, y1, x2, y2).
%
/SetClipRegion {
  % Stack: x1 y1 x2 y2
  newpath
  4 2 roll moveto
  1 index 0 rlineto
  0 exch rlineto
  neg 0 rlineto
  closepath
  clip
  newpath
} def

BeginEPSF
310 761 translate
1.66725 1.6 scale
0 -25 translate
0 25 571 65 SetClipRegion
%% including "/tmp/tmp1sb76393.ps"

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Maxim Widget
%%Title: Window .printEngine1.raw.sbox
%%CreationDate: Wed Dec  1 18:36:13 2021
%%BoundingBox: 0 25 571 65
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Gothic
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Gothic
%%EndSetup

%%Page: 1 1
save
0.0 64.0 translate
0.5998 0.5998 scale
0 -64 translate
0 64 moveto 952 64 lineto 952 0 lineto 0 0 lineto closepath clip newpath
gsave
gsave
0 64 moveto
952 64 lineto
952 0 lineto
0 0 lineto
closepath
clip
newpath
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
0 64 moveto
951 64 lineto
951 0 lineto
0 0 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 63 moveto
949 63 lineto
949 47 lineto
2 47 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 47 moveto
949 47 lineto
949 31 lineto
2 31 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 31 moveto
949 31 lineto
949 15 lineto
2 15 lineto
closepath
fill
grestore
gsave
0.949 0.949 0.949 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 15 moveto
949 15 lineto
949 -1 lineto
2 -1 lineto
closepath
fill
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 64 moveto
2 0 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
128 64 moveto
128 0 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 49 moveto
18 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
18 49 moveto
18 61 lineto
34 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
34 61 moveto
34 49 lineto
49 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
49 49 moveto
49 61 lineto
65 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
65 61 moveto
65 49 lineto
81 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
81 49 moveto
81 61 lineto
97 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
97 61 moveto
97 49 lineto
112 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
112 49 moveto
112 61 lineto
128 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
128 61 moveto
128 49 lineto
144 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
144 49 moveto
144 61 lineto
160 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
160 61 moveto
160 49 lineto
176 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
176 49 moveto
176 61 lineto
191 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
191 61 moveto
191 49 lineto
207 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
207 49 moveto
207 61 lineto
223 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
223 61 moveto
223 49 lineto
239 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
239 49 moveto
239 61 lineto
255 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
255 61 moveto
255 49 lineto
270 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
270 49 moveto
270 61 lineto
286 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
286 61 moveto
286 49 lineto
302 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
302 49 moveto
302 61 lineto
318 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
318 61 moveto
318 49 lineto
333 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
333 49 moveto
333 61 lineto
349 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
349 61 moveto
349 49 lineto
365 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
365 49 moveto
365 61 lineto
381 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
381 61 moveto
381 49 lineto
397 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
397 49 moveto
397 61 lineto
412 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
412 61 moveto
412 49 lineto
428 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
428 49 moveto
428 61 lineto
444 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
444 61 moveto
444 49 lineto
460 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
460 49 moveto
460 61 lineto
475 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
475 61 moveto
475 49 lineto
491 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
491 49 moveto
491 61 lineto
507 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
507 61 moveto
507 49 lineto
523 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
523 49 moveto
523 61 lineto
539 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
539 61 moveto
539 49 lineto
554 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
554 49 moveto
554 61 lineto
570 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
570 61 moveto
570 49 lineto
586 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
586 49 moveto
586 61 lineto
602 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
602 61 moveto
602 49 lineto
618 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
618 49 moveto
618 61 lineto
633 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
633 61 moveto
633 49 lineto
649 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
649 49 moveto
649 61 lineto
665 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
665 61 moveto
665 49 lineto
681 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
681 49 moveto
681 61 lineto
696 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
696 61 moveto
696 49 lineto
712 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
712 49 moveto
712 61 lineto
728 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
728 61 moveto
728 49 lineto
744 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
744 49 moveto
744 61 lineto
760 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
760 61 moveto
760 49 lineto
775 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
775 49 moveto
775 61 lineto
791 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
791 61 moveto
791 49 lineto
807 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
807 49 moveto
807 61 lineto
823 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
823 61 moveto
823 49 lineto
839 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
839 49 moveto
839 61 lineto
854 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
854 61 moveto
854 49 lineto
870 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
870 49 moveto
870 61 lineto
886 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
886 61 moveto
886 49 lineto
902 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
902 49 moveto
902 61 lineto
917 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
917 61 moveto
917 49 lineto
933 49 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
933 49 moveto
933 61 lineto
949 61 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
949 61 moveto
949 61 lineto
949 48 lineto
949 48 lineto
closepath
fill
grestore
gsave
945 47 translate
/TkPhoto { 
  gsave 
  32 dict begin 
  /tinteger exch def 
  /transparent 1 string def 
  transparent 0 tinteger put 
  /olddict exch def 
  olddict /DataSource get dup type /filetype ne { 
    olddict /DataSource 3 -1 roll 
    0 () /SubFileDecode filter put 
  } { 
    pop 
  } ifelse 
  /newdict olddict maxlength dict def 
  olddict newdict copy pop 
  /w newdict /Width get def 
  /crpp newdict /Decode get length 2 idiv def 
  /str w string def 
  /pix w crpp mul string def 
  /substrlen 2 w log 2 log div floor exp cvi def 
  /substrs [ 
  { 
     substrlen string 
     0 1 substrlen 1 sub { 
       1 index exch tinteger put 
     } for 
     /substrlen substrlen 2 idiv def 
     substrlen 0 eq {exit} if 
  } loop 
  ] def 
  /h newdict /Height get def 
  1 w div 1 h div matrix scale 
  olddict /ImageMatrix get exch matrix concatmatrix 
  matrix invertmatrix concat 
  newdict /Height 1 put 
  newdict /DataSource pix put 
  /mat [w 0 0 h 0 0] def 
  newdict /ImageMatrix mat put 
  0 1 h 1 sub { 
    mat 5 3 -1 roll neg put 
    olddict /DataSource get str readstring pop pop 
    /tail str def 
    /x 0 def 
    olddict /DataSource get pix readstring pop pop 
    { 
      tail transparent search dup /done exch not def 
      {exch pop exch pop} if 
      /w1 exch length def 
      w1 0 ne { 
        newdict /DataSource  pix x crpp mul w1 crpp mul getinterval put 
        newdict /Width w1 put 
        mat 4 x neg put 
        /x x w1 add def 
        newdict image 
        /tail tail w1 tail length w1 sub getinterval def 
      } if 
      done {exit} if 
      tail substrs { 
        anchorsearch {pop} if 
      } forall 
      /tail exch def 
      tail length 0 eq {exit} if 
      /x w tail length sub def 
    } loop 
  } for 
  end 
  grestore 
} bind def 


/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 9
  /Height 9
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 9]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
0101FFFFFFFFFF01010000000000004C4C4C4C4C4C4C4C4C4C4C4C4C4C4C
00000000000001FFFFFFFFFFFFFF010000004C4C4CFFFF00FFFF00FFFF00
FFFF00FFFF004C4C4C000000FFFFFFFFFFFFFFFFFF4C4C4CFFFF00FFFF00
000000000000000000FFFF00FFFF004C4C4CFFFFFFFFFFFFFFFFFF4C4C4C
FFFF00FFFF00000000FFFF00000000FFFF00FFFF004C4C4CFFFFFFFFFFFF
FFFFFF4C4C4CFFFF00FFFF00000000FFFF00000000FFFF00FFFF004C4C4C
FFFFFFFFFFFFFFFFFF4C4C4C000000000000000000FFFF00000000000000
0000004C4C4CFFFFFFFFFFFFFFFFFF4C4C4CFFFF00FFFF00FFFF00FFFF00
FFFF00FFFF00FFFF004C4C4C01FFFFFFFFFFFFFF010000004C4C4CFFFF00
FFFF00FFFF00FFFF00FFFF004C4C4C0000000101FFFFFFFFFF0101000000
0000004C4C4C4C4C4C4C4C4C4C4C4C4C4C4C000000000000>
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 39 moveto
4 45 lineto
158 45 lineto
160 39 lineto
158 33 lineto
4 33 lineto
2 39 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
8 35 [
[(00000000)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
160 39 moveto
162 45 lineto
316 45 lineto
318 39 lineto
316 33 lineto
162 33 lineto
160 39 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
166 35 [
[(FFFFFFFF)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
318 39 moveto
320 45 lineto
473 45 lineto
475 39 lineto
473 33 lineto
320 33 lineto
318 39 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
324 35 [
[(55555555)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
475 39 moveto
477 45 lineto
631 45 lineto
633 39 lineto
631 33 lineto
477 33 lineto
475 39 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
481 35 [
[(88888888)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
633 39 moveto
635 45 lineto
789 45 lineto
791 39 lineto
789 33 lineto
635 33 lineto
633 39 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
639 35 [
[(2222BBBB)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
791 39 moveto
793 45 lineto
947 45 lineto
949 39 lineto
947 33 lineto
793 33 lineto
791 39 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
797 35 [
[(88883333)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 23 moveto
4 29 lineto
158 29 lineto
160 23 lineto
158 17 lineto
4 17 lineto
2 23 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
8 19 [
[(00)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
160 23 moveto
162 29 lineto
316 29 lineto
318 23 lineto
316 17 lineto
162 17 lineto
160 23 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
166 19 [
[(7F)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
318 23 moveto
320 29 lineto
473 29 lineto
475 23 lineto
473 17 lineto
320 17 lineto
318 23 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
324 19 [
[(55)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
475 23 moveto
477 29 lineto
631 29 lineto
633 23 lineto
631 17 lineto
477 17 lineto
475 23 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
481 19 [
[(2A)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
633 23 moveto
635 29 lineto
789 29 lineto
791 23 lineto
789 17 lineto
635 17 lineto
633 23 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
639 19 [
[(63)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
791 23 moveto
793 29 lineto
947 29 lineto
949 23 lineto
947 17 lineto
793 17 lineto
791 23 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
797 19 [
[(5D)]
] 9 0 0.85 0 false DrawText
grestore
gsave
1.000 0.600 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 7 moveto
4 13 lineto
174 13 lineto
176 7 lineto
174 1 lineto
4 1 lineto
2 7 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
8 3 [
[(00000000)]
] 9 0 0.85 0 false DrawText
grestore
gsave
1.000 0.600 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
176 7 moveto
178 13 lineto
331 13 lineto
333 7 lineto
331 1 lineto
178 1 lineto
176 7 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
182 3 [
[(FFFFFFFF)]
] 9 0 0.85 0 false DrawText
grestore
gsave
1.000 0.600 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
333 7 moveto
335 13 lineto
647 13 lineto
649 7 lineto
647 1 lineto
335 1 lineto
333 7 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
339 3 [
[(55555555)]
] 9 0 0.85 0 false DrawText
grestore
gsave
1.000 0.600 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
649 7 moveto
651 13 lineto
805 13 lineto
807 7 lineto
805 1 lineto
651 1 lineto
649 7 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
655 3 [
[(2222BBBB)]
] 9 0 0.85 0 false DrawText
grestore
gsave
1.000 0.600 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
807 7 moveto
809 13 lineto
947 13 lineto
949 7 lineto
947 1 lineto
809 1 lineto
807 7 lineto
stroke
grestore
gsave
/Gothic findfont 6 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
813 3 [
[(88883333)]
] 9 0 0.85 0 false DrawText
grestore
gsave
0 64 moveto
952 64 lineto
952 0 lineto
0 0 lineto
closepath
clip
newpath
grestore
grestore
grestore
restore showpage

%%Trailer
end
%%EOF

EndEPSF
grestore
gsave

% including file "lib/blt2.4/bltCanvEps.pro"

%
% PostScript encapulator prolog file of the BLT "eps" canvas item.
%
% Copyright 1991-1997 Bell Labs Innovations for Lucent Technologies.
%
% Permission to use, copy, modify, and distribute this software and its
% documentation for any purpose and without fee is hereby granted, provided
% that the above copyright notice appear in all copies and that both that the
% copyright notice and warranty disclaimer appear in supporting documentation,
% and that the names of Lucent Technologies any of their entities not be used
% in advertising or publicity pertaining to distribution of the software
% without specific, written prior permission.
%
% Lucent Technologies disclaims all warranties with regard to this software,
% including all implied warranties of merchantability and fitness.  In no event
% shall Lucent Technologies be liable for any special, indirect or
% consequential damages or any damages whatsoever resulting from loss of use,
% data or profits, whether in an action of contract, negligence or other
% tortuous action, arising out of or in connection with the use or performance
% of this software.
%

%
% The definitions of the next two macros are from Appendix H of 
% Adobe's "PostScript Language Reference Manual" pp. 709-736.
% 

% Prepare for EPS file

/BeginEPSF {				
  /beforeInclusionState save def
  /dictCount countdictstack def		% Save the # objects in the dictionary
  /opCount count 1 sub def		% Count object on operator stack
  userdict begin			% Make "userdict" the current 
					% dictionary
    /showpage {} def			% Redefine showpage to be null
    0 setgray 
    0 setlinecap
    1 setlinewidth
    0 setlinejoin
    10 setmiterlimit
    [] 0 setdash
    newpath
    /languagellevel where {
      pop languagelevel 
      1 ne {
	false setstrokeadjust false setoverprint
      } if
    } if
    % note: no "end"
} bind def

/EndEPSF { %def
  count opCount sub {
    pop
  } repeat
  countdictstack dictCount sub { 
  end					% Clean up dictionary stack
  } repeat
  beforeInclusionState restore
} bind def


%
% Set up a clip region based upon a bounding box (x1, y1, x2, y2).
%
/SetClipRegion {
  % Stack: x1 y1 x2 y2
  newpath
  4 2 roll moveto
  1 index 0 rlineto
  0 exch rlineto
  neg 0 rlineto
  closepath
  clip
  newpath
} def

BeginEPSF
310 825 translate
1.66725 1.59459 scale
0 -23 translate
0 23 571 60 SetClipRegion
%% including "/tmp/tmp1mx76393.ps"

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Maxim Widget
%%Title: Window .printEngine1.raw.maxis
%%CreationDate: Wed Dec  1 18:36:13 2021
%%BoundingBox: 0 23 571 60
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Gothic
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Gothic
%%EndSetup

%%Page: 1 1
save
0.0 59.0 translate
0.5998 0.5998 scale
0 -59 translate
0 59 moveto 952 59 lineto 952 0 lineto 0 0 lineto closepath clip newpath
gsave
gsave
0 59 moveto
952 59 lineto
952 0 lineto
0 0 lineto
closepath
clip
newpath
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 58 moveto
950 58 lineto
950 1 lineto
1 1 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 1 moveto
2 16 lineto
stroke
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
4 6 [
[(0)]
] 11 0 0.85 0 false DrawText
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
34 1 moveto
34 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
65 1 moveto
65 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
97 1 moveto
97 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
128 1 moveto
128 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
160 1 moveto
160 16 lineto
stroke
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
162 6 [
[(10ns)]
] 11 0 0.85 0 false DrawText
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
191 1 moveto
191 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
223 1 moveto
223 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
255 1 moveto
255 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
286 1 moveto
286 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
318 1 moveto
318 16 lineto
stroke
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
320 6 [
[(20ns)]
] 11 0 0.85 0 false DrawText
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
349 1 moveto
349 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
381 1 moveto
381 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
412 1 moveto
412 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
444 1 moveto
444 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
475 1 moveto
475 16 lineto
stroke
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
477 6 [
[(30ns)]
] 11 0 0.85 0 false DrawText
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
507 1 moveto
507 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
539 1 moveto
539 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
570 1 moveto
570 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
602 1 moveto
602 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
633 1 moveto
633 16 lineto
stroke
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
635 6 [
[(40ns)]
] 11 0 0.85 0 false DrawText
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
665 1 moveto
665 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
696 1 moveto
696 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
728 1 moveto
728 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
760 1 moveto
760 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
791 1 moveto
791 16 lineto
stroke
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
793 6 [
[(50ns)]
] 11 0 0.85 0 false DrawText
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
823 1 moveto
823 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
854 1 moveto
854 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
886 1 moveto
886 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
917 1 moveto
917 3 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
949 1 moveto
949 16 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 44 moveto
2 1 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 44 moveto
2 30 lineto
92 30 lineto
92 44 lineto
2 44 lineto
closepath
fill
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
5 32 [
[(Baseline = 0)]
] 11 0 0.85 0 false DrawText
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
128 30 moveto
128 1 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
128 30 moveto
128 16 lineto
232 16 lineto
232 30 lineto
128 30 lineto
closepath
fill
grestore
gsave
/Gothic findfont 7 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
131 18 [
[(TimeA = 8\0500\051ns)]
] 11 0 0.85 0 false DrawText
grestore
grestore
grestore
restore showpage

%%Trailer
end
%%EOF

EndEPSF
grestore
restore showpage

%%Trailer
end
%%EOF

